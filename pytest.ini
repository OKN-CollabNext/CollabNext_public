[pytest]
addopts =
    -ra
    -q
    --cov=backend
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
    --junitxml=pytest_junit.xml
    --cov-fail-under=80
    --durations=5
    ; --tb=line
    -ra
    --maxfail=999999
testpaths = backend/tests
markers =
    slow: mark test as slow to run
    integration: mark test as requiring DB or external resources
# --tb=line , the single-line "one sentence" traceback
# -ra , Show the reason for the Fail/Skip at the end
# --maxfail=999999 , So that `pytest` won't stop after the first few failures
; --no-print-logs # And no need to print the logs in the console
; Our project primary object has always been for the foreseeable future to limit
; Our testing suit, to backend unit testing only. For unit testing, we wil use
; pytest. The best place to learn is their docs which are very well maintained. Check:
; https://docs.pytest.org/en/stable/example/simple.html
; https://docs.pytest.org/en/stable/example/index.html
; Unit testing vs integration testing | CircleCI
; https://circleci.com/blog/unit-testing-vs-integration-testing/#:~:text=While%20unit%20tests%20always%20take,works%20in%20an%20integrated%20way
log_cli = false
# Setting `log_cli = false` stops (begin quote) live (end quote) logs from printing. But you can always turn them back on for the debugging output.
# Whatever you do don't put `-p no:logging` you'll get a `KeyError: <_pytest.stash.StashKey object at 0x...>` .
# Remember to `pip install pytest-mock`, if it helps

