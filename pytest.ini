[pytest]
addopts = -ra -q --cov=backend --cov-report=term-missing --cov-report=html --cov-report=xml --junitxml=pytest_junit.xml --cov-fail-under=80 --durations=5
testpaths = backend/tests
markers =
    slow: mark test as slow to run
    integration: mark test as requiring DB or external resources
; Our project primary object has always been for the foreseeable future to limit
; Our testing suit, to backend unit testing only. For unit testing, we wil use
; pytest. The best place to learn is their docs which are very well maintained. Check:
; https://docs.pytest.org/en/stable/example/simple.html
; https://docs.pytest.org/en/stable/example/index.html
; Unit testing vs integration testing | CircleCI
; https://circleci.com/blog/unit-testing-vs-integration-testing/#:~:text=While%20unit%20tests%20always%20take,works%20in%20an%20integrated%20way
