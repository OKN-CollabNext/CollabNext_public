<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="88" time="302.225" timestamp="2025-03-05T17:20:50.582234" hostname="MacBook-Pro-8.local"><testcase classname="backend.tests.integration.test_app_integration" name="test_fetch_last_known_institutions[SingleInstitution]" time="0.001" /><testcase classname="backend.tests.integration.test_app_integration" name="test_fetch_last_known_institutions[MultipleInstitutions]" time="0.001" /><testcase classname="backend.tests.integration.test_app_integration" name="test_initial_search_ok[ValidSearch]" time="150.495" /><testcase classname="backend.tests.integration.test_app_integration" name="test_initial_search_ok[UnknownInstitution]" time="150.302" /><testcase classname="backend.tests.integration.test_endpoints" name="test_index_serves_file" time="0.008" /><testcase classname="backend.tests.integration.test_endpoints" name="test_404_error_handler" time="0.006" /><testcase classname="backend.tests.integration.test_endpoints" name="test_500_error_handler" time="0.002" /><testcase classname="backend.tests.integration.test_endpoints" name="test_initial_search_endpoints" time="0.017" /><testcase classname="backend.tests.integration.test_endpoints" name="test_get_institutions_success" time="0.012" /><testcase classname="backend.tests.integration.test_endpoints" name="test_get_institutions_missing_file" time="0.002" /><testcase classname="backend.tests.integration.test_endpoints" name="test_autofill_institutions" time="0.001" /><testcase classname="backend.tests.integration.test_endpoints" name="test_autofill_topics" time="0.001" /><testcase classname="backend.tests.integration.test_endpoints" name="test_get_default_graph_success" time="0.005" /><testcase classname="backend.tests.integration.test_endpoints" name="test_get_default_graph_failure" time="0.002" /><testcase classname="backend.tests.integration.test_endpoints" name="test_get_topic_space" time="0.001" /><testcase classname="backend.tests.integration.test_endpoints" name="test_search_topic_space_success" time="0.004" /><testcase classname="backend.tests.integration.test_endpoints" name="test_search_topic_space_failure" time="0.002" /><testcase classname="backend.tests.integration.test_institutions" name="test_institution_id_lookup[Howard]" time="0.001" /><testcase classname="backend.tests.integration.test_institutions" name="test_institution_id_lookup[Spelman]" time="0.001" /><testcase classname="backend.tests.integration.test_institutions" name="test_institution_id_lookup[Hampton]" time="0.001" /><testcase classname="backend.tests.integration.test_institutions.TestUserLifecycle" name="test_create_user" time="0.000" /><testcase classname="backend.tests.integration.test_institutions.TestUserLifecycle" name="test_get_user" time="0.000" /><testcase classname="backend.tests.integration.test_models" name="test_create_connection_success[DBConnectSuccess]" time="0.001" /><testcase classname="backend.tests.integration.test_models" name="test_create_connection_success[DBConnectSuccessButNotConnected]" time="0.001" /><testcase classname="backend.tests.integration.test_models" name="test_create_connection_fail[MySQLError]" time="0.002" /><testcase classname="backend.tests.integration.test_models" name="test_create_connection_fail[GenericException]" time="0.001" /><testcase classname="backend.tests.integration.test_models" name="test_is_HBCU[HBCU_True]" time="0.001" /><testcase classname="backend.tests.integration.test_models" name="test_is_HBCU[HBCU_False_Zero]" time="0.001" /><testcase classname="backend.tests.integration.test_models" name="test_is_HBCU[HBCU_NoResult]" time="0.001" /><testcase classname="backend.tests.integration.test_search" name="test_search_by_author_param[AuthorFound]" time="0.001" /><testcase classname="backend.tests.integration.test_search" name="test_search_by_author_param[AuthorNotFound]" time="0.001" /><testcase classname="backend.tests.integration.test_search" name="test_search_by_institution_param[InstitutionFound]" time="0.001" /><testcase classname="backend.tests.integration.test_search" name="test_search_by_institution_param[InstitutionNotFound]" time="0.001" /><testcase classname="backend.tests.integration.test_search" name="test_search_by_topic_param[TopicFound]" time="0.001" /><testcase classname="backend.tests.integration.test_search" name="test_search_by_topic_param[TopicNotFound]" time="0.001" /><testcase classname="backend.tests.unit.test_app_extra" name="test_setup_logger_creates_handlers" time="0.002" /><testcase classname="backend.tests.unit.test_app_extra" name="test_execute_query_success" time="0.002" /><testcase classname="backend.tests.unit.test_app_extra" name="test_execute_query_failure" time="0.001" /><testcase classname="backend.tests.unit.test_app_extra" name="test_fetch_last_known_institutions_success" time="0.001" /><testcase classname="backend.tests.unit.test_app_extra" name="test_fetch_last_known_institutions_http_error" time="0.001" /><testcase classname="backend.tests.unit.test_app_extra" name="test_get_author_ids_found" time="0.001" /><testcase classname="backend.tests.unit.test_app_extra" name="test_get_author_ids_not_found" time="0.001" /><testcase classname="backend.tests.unit.test_app_extra" name="test_get_institution_id_found" time="0.001" /><testcase classname="backend.tests.unit.test_app_extra" name="test_get_institution_id_empty_dict" time="0.001" /><testcase classname="backend.tests.unit.test_app_extra" name="test_query_SPARQL_endpoint_success" time="0.001" /><testcase classname="backend.tests.unit.test_app_extra" name="test_query_SPARQL_endpoint_failure" time="0.001" /><testcase classname="backend.tests.unit.test_app_extra" name="test_get_institution_metadata_sparql_no_results" time="0.001" /><testcase classname="backend.tests.unit.test_app_extra" name="test_get_institution_metadata_sparql_valid" time="0.752" /><testcase classname="backend.tests.unit.test_app_extra" name="test_get_author_metadata_sparql_no_results" time="0.002" /><testcase classname="backend.tests.unit.test_app_extra" name="test_get_author_metadata_sparql_valid" time="0.002" /><testcase classname="backend.tests.unit.test_app_extra" name="test_is_HBCU_true" time="0.004" /><testcase classname="backend.tests.unit.test_app_extra" name="test_is_HBCU_false" time="0.003" /><testcase classname="backend.tests.unit.test_app_extra" name="test_is_HBCU_no_result" time="0.003" /><testcase classname="backend.tests.unit.test_app_fallback" name="test_initial_search_exception" time="0.010" /><testcase classname="backend.tests.unit.test_app_fallback" name="test_get_researcher_result_fallback_success" time="0.003" /><testcase classname="backend.tests.unit.test_app_fallback" name="test_get_researcher_result_fallback_no_results" time="0.002" /><testcase classname="backend.tests.unit.test_app_fallback" name="test_get_institution_results_fallback_success" time="0.002" /><testcase classname="backend.tests.unit.test_app_fallback" name="test_get_institution_results_fallback_no_results" time="0.002" /><testcase classname="backend.tests.unit.test_app_fallback" name="test_get_researcher_and_subfield_results_fallback_success" time="0.002" /><testcase classname="backend.tests.unit.test_app_fallback" name="test_get_researcher_and_subfield_results_fallback_no_results" time="0.002" /><testcase classname="backend.tests.unit.test_app_unit" name="test_fetch_institutions_handles_http_error" time="0.005" /><testcase classname="backend.tests.unit.test_app_unit" name="test_fetch_institutions_responses_multiple" time="0.006" /><testcase classname="backend.tests.unit.test_env_and_file_fallback" name="test_get_institutions_missing_file" time="0.002" /><testcase classname="backend.tests.unit.test_env_and_file_fallback" name="test_get_default_graph_missing_file" time="0.002" /><testcase classname="backend.tests.unit.test_env_and_file_fallback" name="test_environment_variable_fallback" time="0.009" /><testcase classname="backend.tests.unit.test_logger_and_static" name="test_setup_logger_has_all_handlers" time="0.002" /><testcase classname="backend.tests.unit.test_logger_and_static" name="test_static_file_serving_file_exists" time="0.003"><failure message="AssertionError: expected call not found.&#10;Expected: send_from_directory('/Users/deangladish/CollabNext_public/backend/build', 'existing.txt')&#10;Actual: send_from_directory('/Users/deangladish/CollabNext_public/backend/build', 'index.html')">client = &lt;FlaskClient &lt;Flask 'backend.app'&gt;&gt;

    def test_static_file_serving_file_exists(client):
        """
        When you set up a static local server, you will know that the file has to exist and when a file exists in the "static" folder the route serves that file. We simulate file existence and a dummy response type from send_from_directory.
        """
        with patch("backend.app.os.path.exists") as mock_exists, \
                patch("backend.app.send_from_directory") as mock_send:
            """ My suspicioun is that the existence of the file is database related and it is something that we have to simulate. When we simulate a file we don't "even" use the same file type we don't even have a file. This is important because "some testing libraries' are "literally" incompatible with especially "graphics files". So we simulate the existence of the file, because that makes everything else possible. """
            mock_exists.return_value = True
            """ Then, we can let the send_from_directory return some dummy file content. """
            mock_send.return_value = "file content"
            """ Upon which we request a file e.g. "/existing.txt")..and when we do, we do it. """
            response = client.get("/existing.txt")
            response_text = response.data.decode()
            assert response_text == "file content", "Expected the file content to be served."
            """ And we do, check that send_from_directory was called with the file requested. Existing techniques for accessing and sending and patching and deleting from the direcotry typically use static (current) sensor measurements to perform machine learning tasks, and in our case we want to check that we did call the send_from_directory with the file that we are learning and looking for. """
            static_folder = app.static_folder
&gt;           mock_send.assert_called_with(static_folder, "existing.txt")

backend/tests/unit/test_logger_and_static.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;MagicMock name='send_from_directory' id='4389195872'&gt;
args = ('/Users/deangladish/CollabNext_public/backend/build', 'existing.txt'), kwargs = {}
expected = call('/Users/deangladish/CollabNext_public/backend/build', 'existing.txt')
actual = call('/Users/deangladish/CollabNext_public/backend/build', 'index.html')
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x105baac20&gt;
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: send_from_directory('/Users/deangladish/CollabNext_public/backend/build', 'existing.txt')
E           Actual: send_from_directory('/Users/deangladish/CollabNext_public/backend/build', 'index.html')

../miniforge3/lib/python3.10/unittest/mock.py:929: AssertionError</failure></testcase><testcase classname="backend.tests.unit.test_logger_and_static" name="test_static_file_serving_file_not_exists" time="0.002" /><testcase classname="backend.tests.unit.test_logging" name="test_logger_setup[InfoLog]" time="0.001" /><testcase classname="backend.tests.unit.test_logging" name="test_logger_setup[WarningLog]" time="0.001" /><testcase classname="backend.tests.unit.test_logging" name="test_flask_app_logging[WarningCase]" time="0.001" /><testcase classname="backend.tests.unit.test_logging" name="test_flask_app_logging[InfoCase]" time="0.001" /><testcase classname="backend.tests.unit.test_search_functions" name="test_search_by_author_success" time="0.001" /><testcase classname="backend.tests.unit.test_search_functions" name="test_search_by_author_no_ids" time="0.001" /><testcase classname="backend.tests.unit.test_search_functions" name="test_search_by_author_institution_topic_success" time="0.001" /><testcase classname="backend.tests.unit.test_search_functions" name="test_search_by_author_institution_topic_no_author_ids" time="0.001" /><testcase classname="backend.tests.unit.test_search_functions" name="test_search_by_author_institution_topic_no_institution_id" time="0.001" /><testcase classname="backend.tests.unit.test_search_functions" name="test_search_by_author_institution_success" time="0.001" /><testcase classname="backend.tests.unit.test_search_functions" name="test_search_by_author_institution_no_author_ids" time="0.001" /><testcase classname="backend.tests.unit.test_search_functions" name="test_search_by_author_institution_no_institution_id" time="0.001" /><testcase classname="backend.tests.unit.test_search_functions" name="test_search_by_institution_topic_success" time="0.001" /><testcase classname="backend.tests.unit.test_search_functions" name="test_search_by_institution_topic_no_institution_id" time="0.001" /><testcase classname="backend.tests.unit.test_search_functions" name="test_search_by_author_topic_success" time="0.001" /><testcase classname="backend.tests.unit.test_search_functions" name="test_search_by_author_topic_no_author_ids" time="0.001" /><testcase classname="backend.tests.unit.test_search_functions" name="test_search_by_topic_success" time="0.001" /><testcase classname="backend.tests.unit.test_search_functions" name="test_search_by_topic_no_result" time="0.001" /><testcase classname="backend.tests.unit.test_search_functions" name="test_search_by_institution_success" time="0.001" /><testcase classname="backend.tests.unit.test_search_functions" name="test_search_by_institution_no_institution_id" time="0.001" /></testsuite></testsuites>