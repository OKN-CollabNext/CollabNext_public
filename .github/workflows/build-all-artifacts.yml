name: Build All Artifacts (Images + Deployment Package)

on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch: # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-images:
    # Only run if PR was merged (not just closed)
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        include:
          - name: backend
            context: ./backend
            dockerfile: ./backend/Dockerfile
            image: backend
          - name: frontend  
            context: ./frontend
            dockerfile: ./frontend/Dockerfile
            image: frontend
          - name: database
            context: ./database
            dockerfile: ./database/Dockerfile
            image: database

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        id: image_name
        run: echo "value=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-deployment-package:
    needs: build-and-push-images
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        id: image_name
        run: echo "value=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Set up Helm
        run: |
          curl https://get.helm.sh/helm-v3.18.3-linux-amd64.tar.gz | tar xz
          sudo mv linux-amd64/helm /usr/local/bin/helm
          helm version

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Package Helm chart
        run: |
          cd helm/collabnext_alpha
          helm dependency update
          helm package .

      - name: Create deployment package
        run: |
          # Create package directory
          mkdir -p collabnext-deployment
          
          # Copy Helm chart
          cp helm/collabnext_alpha/*.tgz collabnext-deployment/
          
          # Create deployment script
          echo '#!/bin/bash' > collabnext-deployment/deploy.sh
          echo 'set -e' >> collabnext-deployment/deploy.sh
          echo '' >> collabnext-deployment/deploy.sh
          echo 'echo "🚀 Deploying CollabNext..."' >> collabnext-deployment/deploy.sh
          echo '' >> collabnext-deployment/deploy.sh
          echo '# Check if Helm is installed' >> collabnext-deployment/deploy.sh
          echo 'if ! command -v helm &> /dev/null; then' >> collabnext-deployment/deploy.sh
          echo '    echo "❌ Helm is not installed. Please install Helm first: https://helm.sh/docs/intro/install/"' >> collabnext-deployment/deploy.sh
          echo '    exit 1' >> collabnext-deployment/deploy.sh
          echo 'fi' >> collabnext-deployment/deploy.sh
          echo '' >> collabnext-deployment/deploy.sh
          echo '# Check if kubectl is installed' >> collabnext-deployment/deploy.sh
          echo 'if ! command -v kubectl &> /dev/null; then' >> collabnext-deployment/deploy.sh
          echo '    echo "❌ kubectl is not installed. Please install kubectl first: https://kubernetes.io/docs/tasks/tools/"' >> collabnext-deployment/deploy.sh
          echo '    exit 1' >> collabnext-deployment/deploy.sh
          echo 'fi' >> collabnext-deployment/deploy.sh
          echo '' >> collabnext-deployment/deploy.sh
          echo '# Get the chart file' >> collabnext-deployment/deploy.sh
          echo 'CHART_FILE=$(ls *.tgz | head -1)' >> collabnext-deployment/deploy.sh
          echo 'if [ -z "$CHART_FILE" ]; then' >> collabnext-deployment/deploy.sh
          echo '    echo "❌ No Helm chart found in current directory"' >> collabnext-deployment/deploy.sh
          echo '    exit 1' >> collabnext-deployment/deploy.sh
          echo 'fi' >> collabnext-deployment/deploy.sh
          echo '' >> collabnext-deployment/deploy.sh
          echo 'echo "📦 Installing chart: $CHART_FILE"' >> collabnext-deployment/deploy.sh
          echo '' >> collabnext-deployment/deploy.sh
          echo '# Install the chart' >> collabnext-deployment/deploy.sh
          echo 'helm install collabnext ./$CHART_FILE' >> collabnext-deployment/deploy.sh
          echo '' >> collabnext-deployment/deploy.sh
          echo 'echo "✅ CollabNext deployed successfully!"' >> collabnext-deployment/deploy.sh
          echo 'echo ""' >> collabnext-deployment/deploy.sh
          echo 'echo "🔍 To check the status:"' >> collabnext-deployment/deploy.sh
          echo 'echo "   kubectl get pods"' >> collabnext-deployment/deploy.sh
          echo 'echo ""' >> collabnext-deployment/deploy.sh
          echo 'echo "🌐 To access the application:"' >> collabnext-deployment/deploy.sh
          echo 'echo "   kubectl port-forward svc/collabnext-frontend 3000:80"' >> collabnext-deployment/deploy.sh
          echo 'echo "   Then open http://localhost:3000 in your browser"' >> collabnext-deployment/deploy.sh
          echo 'echo ""' >> collabnext-deployment/deploy.sh
          echo 'echo "🗑️  To uninstall:"' >> collabnext-deployment/deploy.sh
          echo 'echo "   helm uninstall collabnext"' >> collabnext-deployment/deploy.sh
          
          chmod +x collabnext-deployment/deploy.sh
          
          # Create README
          echo '# CollabNext Deployment Package' > collabnext-deployment/README.md
          echo '' >> collabnext-deployment/README.md
          echo 'This package contains everything needed to deploy CollabNext to your Kubernetes cluster.' >> collabnext-deployment/README.md
          echo '' >> collabnext-deployment/README.md
          echo '## Quick Start' >> collabnext-deployment/README.md
          echo '' >> collabnext-deployment/README.md
          echo '1. **Prerequisites:**' >> collabnext-deployment/README.md
          echo '   - Kubernetes cluster (local or cloud)' >> collabnext-deployment/README.md
          echo '   - Helm 3.0+' >> collabnext-deployment/README.md
          echo '   - kubectl' >> collabnext-deployment/README.md
          echo '' >> collabnext-deployment/README.md
          echo '2. **Deploy:**' >> collabnext-deployment/README.md
          echo '   ```bash' >> collabnext-deployment/README.md
          echo '   cd collabnext-deployment' >> collabnext-deployment/README.md
          echo '   ./deploy.sh' >> collabnext-deployment/README.md
          echo '   ```' >> collabnext-deployment/README.md
          echo '' >> collabnext-deployment/README.md
          echo '3. **Access:**' >> collabnext-deployment/README.md
          echo '   ```bash' >> collabnext-deployment/README.md
          echo '   kubectl port-forward svc/collabnext-frontend 3000:80' >> collabnext-deployment/README.md
          echo '   ```' >> collabnext-deployment/README.md
          echo '   Then open http://localhost:3000 in your browser' >> collabnext-deployment/README.md
          
          # Create version info
          echo "CollabNext Deployment Package" > collabnext-deployment/version.txt
          echo "Version: $(date +%Y-%m-%d)" >> collabnext-deployment/version.txt
          echo "Chart: $(ls helm/collabnext_alpha/*.tgz | head -1)" >> collabnext-deployment/version.txt
          echo "Images:" >> collabnext-deployment/version.txt
          echo "  - ghcr.io/okn-collabnext/collabnext_public/backend:latest" >> collabnext-deployment/version.txt
          echo "  - ghcr.io/okn-collabnext/collabnext_public/frontend:latest" >> collabnext-deployment/version.txt
          echo "  - ghcr.io/okn-collabnext/collabnext_public/database:latest" >> collabnext-deployment/version.txt
          
          # Create archive
          tar -czf collabnext-deployment-$(date +%Y%m%d).tar.gz collabnext-deployment/
          
          echo "📦 Created deployment package: collabnext-deployment-$(date +%Y%m%d).tar.gz"

      - name: Push deployment package to GHCR
        run: |
          # Create a simple Dockerfile to package the deployment files
          cat > Dockerfile.deploy << 'EOF'
          FROM alpine:3.19
          COPY collabnext-deployment/ /deployment/
          LABEL org.opencontainers.image.title="CollabNext Deployment Package"
          LABEL org.opencontainers.image.description="Complete deployment package for CollabNext"
          LABEL org.opencontainers.image.version="$(date +%Y%m%d)"
          EOF
          
          # Build and push the package as an OCI artifact
          docker build -f Dockerfile.deploy -t ${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/deployment-package:$(date +%Y%m%d) .
          docker build -f Dockerfile.deploy -t ${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/deployment-package:latest .
          
          docker push ${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/deployment-package:$(date +%Y%m%d)
          docker push ${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/deployment-package:latest
          
          echo "📦 Pushed deployment package to GHCR:"
          echo "   ${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/deployment-package:$(date +%Y%m%d)"
          echo "   ${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/deployment-package:latest"

  create-deployment-manifest:
    needs: [build-and-push-images, create-deployment-package]
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        id: image_name
        run: echo "value=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Create unified deployment manifest
        run: |
          # Create a comprehensive deployment manifest
          cat > deployment-manifest.json << EOF
          {
            "application": "collabnext",
            "version": "$(date +%Y%m%d)",
            "build": {
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "triggered_by": "${{ github.actor }}",
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            },
            "artifacts": {
              "deployment_package": {
                "repository": "${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/deployment-package",
                "version": "$(date +%Y%m%d)",
                "latest": "${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/deployment-package:latest"
              },
              "images": {
                "backend": "${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/backend:latest",
                "frontend": "${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/frontend:latest",
                "database": "${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/database:latest"
              }
            },
            "deployment": {
              "one_liner": {
                "command": "curl -s https://raw.githubusercontent.com/OKN-CollabNext/CollabNext_public/main/scripts/deploy-from-ghcr.sh | bash",
                "description": "One-command deployment from GHCR"
              },
              "manual": {
                "command": "docker run --rm -v \$(pwd):/output ${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/deployment-package:latest cp -r /deployment /output/ && cd deployment && ./deploy.sh",
                "description": "Manual deployment from GHCR"
              },
              "upgrade": {
                "command": "helm upgrade collabnext ./collabnext-alpha-*.tgz",
                "description": "Upgrade existing deployment"
              }
            },
            "registry": {
              "type": "github_container_registry",
              "url": "${{ env.REGISTRY }}",
              "organization": "${{ github.repository_owner }}",
              "repository": "${{ github.event.repository.name }}"
            }
          }
          EOF
          
          echo "🎯 Unified Deployment Manifest:"
          cat deployment-manifest.json

      - name: Upload deployment manifest
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest
          path: deployment-manifest.json
          retention-days: 90

  make-packages-public:
    needs: [build-and-push-images, create-deployment-package]
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    steps:
      - name: Make all GHCR packages public
        run: |
          for pkg in backend frontend database deployment-package; do
            gh api \
              -X PATCH \
              -H "Accept: application/vnd.github+json" \
              /orgs/okn-collabnext/packages/container/$pkg/visibility \
              -f visibility=public || true
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 