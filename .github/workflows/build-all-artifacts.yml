name: Build All Artifacts (Images + Deployment Package)

on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch: # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-images:
    # Only run if PR was merged (not just closed)
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        include:
          - name: backend
            context: ./backend
            dockerfile: ./backend/Dockerfile
            image: backend
          - name: frontend  
            context: ./frontend
            dockerfile: ./frontend/Dockerfile
            image: frontend
          - name: database
            context: ./database
            dockerfile: ./database/Dockerfile
            image: database

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        id: image_name
        run: echo "value=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-deployment-manifest:
    needs: [build-and-push-images]
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        id: image_name
        run: echo "value=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Create unified deployment manifest
        run: |
          # Create a comprehensive deployment manifest
          cat > deployment-manifest.json << EOF
          {
            "application": "collabnext",
            "version": "$(date +%Y%m%d)",
            "build": {
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "triggered_by": "${{ github.actor }}",
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            },
            "artifacts": {
              "images": {
                "backend": "${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/backend:latest",
                "frontend": "${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/frontend:latest",
                "database": "${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/database:latest"
              }
            },
            "deployment": {
              "one_liner": {
                "command": "curl -s https://raw.githubusercontent.com/OKN-CollabNext/CollabNext_public/main/scripts/deploy-from-ghcr.sh | bash",
                "description": "One-command deployment from GHCR"
              },
              "manual": {
                "command": "docker run --rm -v \$(pwd):/output ${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}/deployment-package:latest cp -r /deployment /output/ && cd deployment && ./deploy.sh",
                "description": "Manual deployment from GHCR"
              },
              "upgrade": {
                "command": "helm upgrade collabnext ./collabnext-alpha-*.tgz",
                "description": "Upgrade existing deployment"
              }
            },
            "registry": {
              "type": "github_container_registry",
              "url": "${{ env.REGISTRY }}",
              "organization": "${{ github.repository_owner }}",
              "repository": "${{ github.event.repository.name }}"
            }
          }
          EOF
          
          echo "ðŸŽ¯ Unified Deployment Manifest:"
          cat deployment-manifest.json

      - name: Upload deployment manifest
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest
          path: deployment-manifest.json
          retention-days: 90

  make-packages-public:
    needs: [build-and-push-images]
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    steps:
      - name: Make all GHCR packages public
        run: |
          for pkg in backend frontend database; do
            gh api \
              -X PATCH \
              -H "Accept: application/vnd.github+json" \
              /orgs/okn-collabnext/packages/container/$pkg/visibility \
              -f visibility=public || true
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 