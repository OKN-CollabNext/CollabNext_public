name: Build and Push Helm Chart

on:
  workflow_dispatch: # Manual trigger only

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-helm-chart:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.18.3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate version
        id: version
        run: |
          # Generate a version based on git info
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION="0.1.0"
          else
            # For other branches, use branch name and commit hash
            # Ensure branch name is valid for semantic versioning
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
            VERSION="0.1.0-${BRANCH_NAME}.${SHORT_SHA}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"
          
          # Validate the version format
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Error: Invalid semantic version format: $VERSION"
            exit 1
          fi

      - name: Package Helm chart
        run: |
          cd helm/collabnext_alpha
          echo "Current directory: $(pwd)"
          echo "Chart.yaml contents:"
          cat Chart.yaml
          echo "Generated version: ${{ steps.version.outputs.version }}"
          
          # Clean up any existing charts directory and lock file
          rm -rf charts/
          rm -f Chart.lock
          
          echo "Running helm dependency update..."
          helm dependency update
          
          echo "Running helm package..."
          helm package . --version ${{ steps.version.outputs.version }} --app-version ${{ steps.version.outputs.version }}

      - name: Push Helm chart to OCI registry
        run: |
          cd helm/collabnext_alpha
          # Push the chart as an OCI artifact
          helm push collabnext-alpha-${{ steps.version.outputs.version }}.tgz oci://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/helm-chart
          
          # Also tag as latest if this is the main branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            helm push collabnext-alpha-${{ steps.version.outputs.version }}.tgz oci://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/helm-chart:latest
          fi

      - name: Create Helm chart metadata
        run: |
          # Create a metadata file for easy consumption
          cat > helm-chart-metadata.json << EOF
          {
            "name": "collabnext-alpha",
            "version": "${{ steps.version.outputs.version }}",
            "repository": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/helm-chart",
            "images": {
              "backend": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest",
              "frontend": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest",
              "database": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/database:latest"
            },
            "deployment": {
              "local": "helm install collabnext-local oci://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/helm-chart --version ${{ steps.version.outputs.version }} -f values-local.yaml",
              "production": "helm install collabnext-prod oci://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/helm-chart --version ${{ steps.version.outputs.version }} -f values.yaml"
            }
          }
          EOF
          
          echo "Helm chart metadata:"
          cat helm-chart-metadata.json

      - name: Upload Helm chart metadata
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart-metadata
          path: helm-chart-metadata.json
          retention-days: 30 